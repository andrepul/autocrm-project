# .cursorrules


# General rules

- Provide concise and relevant responses
- Be very careful about private keys, passwords, and other sensitive information. Teach me how to handle them.
- Accuracy and depth matter.
- Verify information before making changes
- Sources at the end, not mid-text.
- Preserve existing code structures unless extremely beneficial to do otherwise
- Keep the style internally consistent within each project. If no style is available, follow best-practice for coding style.
- It's ok to have longer responses for complex answers.
- For code tweaks, show minimal context - a few lines around changes max.
- Don't be lazy, write all the code to implement features I ask for.
- Verify all information before making changes

I'm tipping $9000 for an optimal, elegant, minimal world-class solution that meets all specifications. Your code changes should be specific and complete. Think through the problems step-by-step.

YOU MUST:

- Follow the User's intent PRECISELY
- NEVER break existing functionality by removing/modifying code or CSS without knowing exactly how to restore the same function
- Always strive to make your diff as tiny as possible

You will be penalized if you:

- Skip steps in your thought process
- Add placeholders or TODOs for other developers (unless explicitly asked)
- Deliver code that is not production-ready

# File-by-file changes

- Make changes in small, incremental steps
- Test changes thoroughly before committing
- Document changes clearly in commit messages

# Code style and formatting

- Follow the project's coding standards
- Use consistent naming conventions
- Avoid using deprecated functions or libraries

# Debugging and testing

- Include debug information in log files
- Write unit tests for new code
- Ensure all tests pass before merging

# Project structure

- Maintain a clear and organized project structure
- Use meaningful names for files and directories
- Avoid clutter by removing unnecessary files

# Project specific rules

We are developing a CRM app, basically a version of Zendesk. For this week, we should have the following features:

1. Standard Identifiers & Timestamps: Basic fields like ticket ID, creation date, and status updates.
2. Flexible Metadata:
   1. Dynamic Status Tracking: Reflects team workflows.
   2. Priority Levels: Manage response times effectively.
   3. Custom Fields: Tailor tickets to specific business needs.
   4. Tags: Enable categorization and automation.
   5. Internal Notes: Facilitate team collaboration.
   Full Conversation History: Includes interactions between customers and team members.

Once these are in place, our goal will be to incorporate AI to take care of tasks that can be automated. For now, let's just focus on the basic features.

Important: First goalpost is to have a basic ticket management system.

Additional context for this project can be found in the project folder, in the folder called "cursor_context".

We are editing the project both in Cursor and in loveable.dev. Be extra careful about not breaking the project in loveable.dev. Keep this in mind when making changes, particularly when deleting files or lines of code. Point out risks to me.

## API-First Design
We are supposed to have an API-first design. "API-first development just means the business logic has been abstracted away from your UI. That means all the complex operations are happening the API layer or Supabase. Handle your key logic on the api layer or Supabase, not on React frontend." Let's aim for Supabase as the API layer, and point out to me when we are doing something that should be on the API layer.

An API-first approach ensures accessibility and scalability, enabling:

- Integration: Connect seamlessly with websites, applications, and external tools.
- Automation: Simplify routine tasks and workflows.
- AI Enhancements: Lay the groundwork for future features.
- Analytics: Support robust reporting and insights.

API Features:

- Synchronous Endpoints: Handle immediate operations.
- Webhooks: Support event-driven architectures.
- Granular Permissions: Ensure secure integrations using API key authentication.

# Database Schema as of 2025-01-23 11:30 GMT-3

## tickets
| Column Name  | Data Type     | Description                      |
|--------------|---------------|----------------------------------|
| id           | uuid          | Primary key                     |
| title        | text          | Title of the ticket             |
| description  | text          | Description of the issue        |
| status       | ticket_status | Status of the ticket            |
| priority     | int4          | Priority level (integer)        |
| customer_id  | uuid          | Reference to the customer       |
| assigned_to  | uuid          | Reference to the assignee       |
| created_at   | timestamptz   | Timestamp of creation           |
| updated_at   | timestamptz   | Timestamp of last update        |

---

## ticket_responses
| Column Name   | Data Type   | Description                      |
|---------------|-------------|----------------------------------|
| id            | uuid        | Primary key                     |
| ticket_id     | uuid        | Reference to the ticket         |
| responder_id  | uuid        | Reference to the responder      |
| content       | text        | Content of the response         |
| created_at    | timestamptz | Timestamp of creation           |
| updated_at    | timestamptz | Timestamp of last update        |

---

## profiles
| Column Name   | Data Type   | Description                      |
|---------------|-------------|----------------------------------|
| id            | uuid        | Primary key                     |
| role          | user_role   | Role of the user                |
| full_name     | text        | Full name of the user           |
| email         | text        | Email of the user               |
| created_at    | timestamptz | Timestamp of creation           |
| updated_at    | timestamptz | Timestamp of last update        |

---

## auth.users
| Column Name   | Data Type   | Description                      |
|---------------|-------------|----------------------------------|
| id            | uuid        | Primary key                     |

---


# CleanCode

Don't Repeat Yourself (DRY)
Duplication of code can make code very difficult to maintain. Any change in logic can make the code prone to bugs or can
make the code change difficult. This can be fixed by doing code reuse (DRY Principle).

The DRY principle is stated as "Every piece of knowledge must have a single, unambiguous, authoritative representation
within a system".

The way to achieve DRY is by creating functions and classes to make sure that any logic should be written in only one
place.

Curly's Law - Do One Thing
Curly's Law is about choosing a single, clearly defined goal for any particular bit of code: Do One Thing.

Curly's Law: A entity (class, function, variable) should mean one thing, and one thing only. It should not mean one
thing in one circumstance and carry a different value from a different domain some other time. It should not mean two
things at once. It should mean One Thing and should mean it all of the time.

Keep It Simple Stupid (KISS)
The KISS principle states that most systems work best if they are kept simple rather than made complicated; therefore,
simplicity should be a key goal in design, and unnecessary complexity should be avoided.

Simple code has the following benefits:

less time to write
less chances of bugs
easier to understand, debug and modify
Do the simplest thing that could possibly work.

Don't make me think
Code should be easy to read and understand without much thinking. If it isn't then there is a prospect of
simplification.

You Aren't Gonna Need It (YAGNI)
You Aren't Gonna Need It (YAGNI) is an Extreme Programming (XP) practice which states: "Always implement things when you
actually need them, never when you just foresee that you need them."

Even if you're totally, totally, totally sure that you'll need a feature, later on, don't implement it now. Usually,
it'll turn out either:

you don't need it after all, or
what you actually need is quite different from what you foresaw needing earlier.
This doesn't mean you should avoid building flexibility into your code. It means you shouldn't over-engineer something
based on what you think you might need later on.

There are two main reasons to practice YAGNI:

You save time because you avoid writing code that you turn out not to need.
Your code is better because you avoid polluting it with 'guesses' that turn out to be more or less wrong but stick
around anyway.
Premature Optimization is the Root of All Evil
Programmers waste enormous amounts of time thinking about or worrying about, the speed of noncritical parts of their
programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are
considered.

We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil.
Yet we should not pass up our opportunities in that critical 3%.

- Donald Knuth

Boy-Scout Rule
Any time someone sees some code that isn't as clear as it should be, they should take the opportunity to fix it right there and then - or at least within a few minutes.

This opportunistic refactoring is referred to by Uncle Bob as following the boy-scout rule - always leave the code behind in a better state than you found it.

The code quality tends to degrade with each change. This results in technical debt. The Boy-Scout Principle saves us from that.

Code for the Maintainer
Code maintenance is an expensive and difficult process. Always code considering someone else as the maintainer and making changes accordingly even if you're the maintainer. After a while, you'll remember the code as much as a stranger.

Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live.

Principle of Least Astonishment
Principle of Least Astonishment states that a component of a system should behave in a way that most users will expect
it to behave. The behavior should not astonish or surprise users.

Code should do what the name and comments suggest. Conventions should be followed. Surprising side effects should be
avoided as much as possible.

